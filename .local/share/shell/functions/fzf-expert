#!/bin/sh
# fzf expert
# functions to do specialized fully functional fuzzy searchs
# standard shortcuts: enter opens, tab closes preview, delete moves file to trash, f1 opens with nvim

printHelp() {
    printf "HELP:
    This program runs specialized instances of fzf:
    \t\e[1m'hidden'\e[0m include hidden and generally ignored paths like .git and .cache;
    \t\e[1m'md'\e[0m markdown only;
    \t\e[1m'pdf'\e[0m pdf and postscript only;
    \t\e[1m'video'\e[0m videos only"
}

# fzf run in it's own shell so I can't parse functions and aliases as as commands. Although it expand variables and interpret them in '--preview'. And, of course, it can be anything that is in path. This should be a script in it's own instead of a function.
prevBat="bat --style=numbers --color=always --line-range :500 {}" # standard text preview w/ bat

fzfHidden() { rg -iuu -g '!.git/**' -g '!.cache/**' --files | fzf --preview "$prevBat"; }

fzfMd() { rg -t md --files | fzf --preview "prevBat"; }

# Killing all evince-previewer processes is not a big deal most of the time I will have only one open.
fzfPdf() {
    rg -t pdf -t postscript --files | fzf --bind "enter:execute(evince -w {} &>/dev/null),tab:execute(killall evince-previewer),del:reload(trash {} && rg -t pdf -t postscript --files)"
} 

# I could use an advanced grep command to select the right mpv process but I'm fine with closing all instances indiscriminately. 
fzfVideo() {
    rg --type-add 'video:*.mp4' --type-add 'video:*.mkv' --type-add 'video:*.avi' -t video --files | fzf --bind "enter:execute(mpv {}),tab:execute(killall mpv),del:reload(trash {} && rg --type-add 'video:*.mp4' --type-add 'video:*.mkv' --type-add 'video:*.avi' -t video --files)"
} 

case $1 in
    help) printHelp;;
    hidden) fzfHidden;;
    md) fzfMd;;
    pdf) fzfPdf;;
    video) fzfVideo;;
esac

