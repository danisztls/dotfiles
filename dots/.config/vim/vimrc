" plugins
call plug#begin('$XDG_CONFIG_HOME/vim/plugged')
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim' " fuzzy search
Plug 'preservim/nerdtree' " file browser 
Plug 'Xuyuanp/nerdtree-git-plugin' " git support
Plug 'ryanoasis/vim-devicons' " icons support
Plug 'vim-airline/vim-airline' " status line
Plug 'airblade/vim-gitgutter' " git highlight, un/stage changes
Plug 'tpope/vim-fugitive' " conflict resolution flow
Plug 'junegunn/gv.vim' " commit browser
"Plug 'jreybert/vimagit' 
Plug 'dense-analysis/ale' " syntax highlighting
Plug 'metakirby5/codi.vim' " REPL
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'godlygeek/tabular' " text filtering and alignment
Plug 'plasticboy/vim-markdown' " markdown stuff
Plug 'mzlogin/vim-markdown-toc' " md table of contents
"Plug 'lbcnz/markdown-preview.nvim', { 'do': 'cd app & yarn install', 'branch': 'beta' }
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install' }
"Plug 'jceb/vim-orgmode'
Plug 'aklt/plantuml-syntax'
Plug 'NLKNguyen/papercolor-theme' " improved highlighting
Plug 'junegunn/vader.vim' " test framework
Plug 'SirVer/ultisnips' " snippets framework
Plug 'honza/vim-snippets' " snippets
Plug 'wakatime/vim-wakatime'
call plug#end()

"set vim info path
set viminfo+='1000,n$XDG_CACHE_HOME/vim/viminfo
if has('nvim') | let &viminfo .= '.nvim' | endif

"set nocompatible
filetype plugin indent on
syntax on
set encoding=utf-8

" line number
set number relativenumber
nnoremap <leader>h :setlocal number! relativenumber!<CR>

" 4 spaces tab
set tabstop=4
set shiftwidth=4
set expandtab

" autocompletion
set wildmode=longest,list,full

" fix splits
set splitbelow splitright
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" enable mouse events
set mouse=a

" alternative <esc> in insert mode
inoremap jk <esc>

" disable arrow keys
"inoremap <Up> <nop>
"inoremap <Down> <nop>
"inoremap <Left> <nop>
"inoremap <Right> <nop>

" enclose helpers
nnoremap <leader>" viw<esc>a"<esc>bi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>bi'<esc>lel
nnoremap <leader>( viw<esc>a)<esc>bi(<esc>lel
nnoremap <leader>[ viw<esc>a]<esc>bi[<esc>lel
nnoremap <leader>{ viw<esc>a}<esc>bi{<esc>lel
nnoremap <leader>* viw<esc>a*<esc>bi*<esc>lel

" folds
nnoremap <space> za

" ignores capital-typos when you want to write/quit
:command WQ wq
:command Wq wq
:command W w
:command Q q

" clipboard
vnoremap <C-c> "*y :let @+=@*<CR>
noremap <C-v> "+P

" spell-check
nnoremap <leader>en :setlocal spell! spelllang=en_us<CR>
nnoremap <leader>pt :setlocal spell! spelllang=pt_br<CR>

" vim auto-update
set updatetime=250

" disable automatic commenting on new line
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" soft linewrap
set wrap linebreak

" colors
let g:PaperColor_Theme_Options = {
  \   'theme': {
  \     'default': {
  \       'transparent_background': 1,
  \       'override' : {
  \         'color00' : ['#1d2529', ''],
  \         'color01' : ['#12171a', ''],
  \         'color02' : ['#ff66c2', ''],
  \         'color03' : ['#d9b600', ''],
  \         'color04' : ['#6bac00', ''],
  \         'color05' : ['#999999', ''],
  \         'color06' : ['#d40059', ''],
  \         'color07' : ['#dddddd', ''],
  \         'color08' : ['#00a8e0', ''],
  \         'color09' : ['#ff5c00', ''],
  \         'color10' : ['#379000', ''],
  \         'color11' : ['#00af9e', ''],
  \         'color12' : ['#b37eff', ''],
  \         'color13' : ['#009385', ''],
  \         'color14' : ['#0087e9', ''],
  \         'color15' : ['#cf2424', ''],
  \         'cursorlinenr_bg' : ['#3a3a3a', ''],
  \         'visual_bg' : ['#bec0c0', '']
  \       }
  \     }
  \   }
  \ }

set background=dark
colorscheme PaperColor

" fzf
nnoremap <leader>F :Files<CR>
nnoremap <leader>fw :Windows<CR>

" Git and diffs
nnoremap dg :diffget<CR>
nnoremap dh :diffget LO<CR>
nnoremap dl :diffget RE<CR>
nnoremap <silent> ]C /\v^[<>=\|]{4,7}($\|\s\|\r)<CR>

"" vim-fugitive
nnoremap <leader>fc :BCommits<CR>
nnoremap <leader>fC :Commits<CR>

"" gitgutter
highlight GitGutterAdd    guifg=#009900 ctermfg=2
highlight GitGutterChange guifg=#bbbb00 ctermfg=3
highlight GitGutterDelete guifg=#ff2222 ctermfg=1

" nerdtree
noremap <leader>b :NERDTreeToggle<CR>
let g:NERDTreeGitStatusUseNerdFonts = 1

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='supernova'

" ALE
let g:airline#extensions#ale#enabled = 1
highlight ALEWarning ctermbg=yellow
highlight ALEError ctermbg=red
nmap <silent> <C-b> <Plug>(ale_previous_wrap)
nmap <silent> <C-e> <Plug>(ale_next_wrap)

" codi
nnoremap <leader>c :Codi<CR>
nnoremap <leader>C :Codi!<CR>

"markdown
set conceallevel=2
let g:vim_markdown_math = 0 " if enabled $ signs will bug syntax
let g:vim_markdown_frontmatter = 1
set foldlevel=3
"let g:vim_markdown_folding_disabled = 1

" markdown-preview
function! g:Mkdp_chromium(url)
  silent execute "!chromium --app=" . a:url . " &"
endfunc

"let g:mkdp_refresh_slow = 1
"let g:mkdp_auto_start = 1
"let g:mkdp_browser = "firefox"
let g:mkdp_browserfunc = "Mkdp_chromium"
"let g:mkdp_markdown_css = expand('~/.config/vim/markdown.css')
nmap <leader>p <Plug>MarkdownPreview
nmap <leader>P <Plug>MarkdownPreviewStop
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {},
    \ 'flowchart_diagrams': {},
    \ 'content_editable': v:false,
    \ 'disable_filename': 1
    \ }

"markdown-toc
let g:vmt_fence_text = 'TOC'
let g:vmt_fence_closing_text = '/TOC'
"let g:vmt_list_item_char = '*'
"let g:vmt_cycle_list_item_markers = 1
nnoremap <leader>t :GenTocGFM<CR>

"UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
nnoremap <leader>fs :Snippets<CR>

" Python
autocmd FileType python :iabbrev <buffer> iff if:<left>
