" plugins
call plug#begin('$XDG_CONFIG_HOME/vim/plugged')
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim' " fuzzy search

Plug 'preservim/nerdtree' " file browser 
Plug 'Xuyuanp/nerdtree-git-plugin' " git support
Plug 'ryanoasis/vim-devicons' " icons support

Plug 'vim-airline/vim-airline' " status line

Plug 'airblade/vim-gitgutter' " git highlight, un/stage changes
Plug 'tpope/vim-fugitive' " conflict resolution flow
Plug 'junegunn/gv.vim' " commit browser
"Plug 'jreybert/vimagit' 

Plug 'dense-analysis/ale' " syntax highlighting

"Plug 'neoclide/coc.nvim', {'branch': 'release'} " lsp editor

Plug 'metakirby5/codi.vim' " REPL

Plug 'godlygeek/tabular' " text filtering and alignment
Plug 'plasticboy/vim-markdown' " markdown stuff
Plug 'mzlogin/vim-markdown-toc' " md table of contents
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install' }
"Plug 'jceb/vim-orgmode'
Plug 'aklt/plantuml-syntax'

Plug 'NLKNguyen/papercolor-theme'
call plug#end()

"set vim info path
set viminfo+='1000,n$XDG_CACHE_HOME/vim/viminfo
if has('nvim') | let &viminfo .= '.nvim' | endif

"set nocompatible
filetype plugin indent on
syntax on
set encoding=utf-8

" line number
set number relativenumber
nmap <leader>h :setlocal number! relativenumber!<CR>

" 4 spaces tab
set tabstop=4
set shiftwidth=4
set expandtab

" autocompletion
set wildmode=longest,list,full

" fix splits
set splitbelow splitright
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" gnores capital-typos when you want to write/quit
:command WQ wq
:command Wq wq
:command W w
:command Q q

" clipboard
vnoremap <C-c> "*y :let @+=@*<CR>
map <C-v> "+P

" spell-check
nmap <leader>en :setlocal spell! spelllang=en_us<CR>
nmap <leader>pt :setlocal spell! spelllang=pt_br<CR>

" vim auto-update
set updatetime=250

" disable automatic commenting on new line
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" soft linewrap
set wrap linebreak

" colors
let g:PaperColor_Theme_Options = {
  \   'theme': {
  \     'default': {
  \       'transparent_background': 1,
  \       'override' : {
  \         'color00' : ['#1d2529', ''],
  \         'color01' : ['#f21d41', ''],
  \         'color02' : ['#88f719', ''],
  \         'color03' : ['#ffc107', ''],
  \         'color04' : ['#00d4ff', ''],
  \         'color05' : ['#9000ff', ''],
  \         'color06' : ['#29a69a', ''],
  \         'color07' : ['#cfd8dc', ''],
  \         'color08' : ['#12171a', ''],
  \         'color09' : ['#cc0f2f', ''],
  \         'color10' : ['#69bf13', ''],
  \         'color11' : ['#f29800', ''],
  \         'color12' : ['#00a8e0', ''],
  \         'color13' : ['#8416d9', ''],
  \         'color14' : ['#009688', ''],
  \         'color15' : ['#eceff1', ''],
  \         'cursorlinenr_bg' : ['#3a3a3a', ''],
  \         'visual_bg' : ['#bec0c0', '']
  \       }
  \     }
  \   }
  \ }

set background=dark
colorscheme PaperColor

" fzf
nmap <leader>f :Files

" nerdtree
map <leader>b :NERDTreeToggle<CR>
let g:NERDTreeGitStatusUseNerdFonts = 1

" airline
let g:airline#extensions#tabline#enabled = 1
"let g:airline_powerline_fonts = 1

" gitgutter
highlight GitGutterAdd    guifg=#009900 ctermfg=2
highlight GitGutterChange guifg=#bbbb00 ctermfg=3
highlight GitGutterDelete guifg=#ff2222 ctermfg=1

" ALE
let g:airline#extensions#ale#enabled = 1
highlight ALEWarning ctermbg=yellow
highlight ALEError ctermbg=red
nmap <silent> <C-b> <Plug>(ale_previous_wrap)
nmap <silent> <C-e> <Plug>(ale_next_wrap)

" codi
nmap <leader>c :Codi
nmap <leader>C :Codi!

"markdown
set conceallevel=2
let g:vim_markdown_math = 0 " if enabled $ signs will bug syntax
let g:vim_markdown_frontmatter = 1
set foldlevel=3
"let g:vim_markdown_folding_disabled = 1

" markdown-preview
function! g:Mkdp_chromium(url)
  silent execute "!chromium --app=" . a:url . " &"
endfunc

"let g:mkdp_refresh_slow = 1
"let g:mkdp_browser = "chromium"
let g:mkdp_browserfunc = "Mkdp_chromium"
let g:mkdp_markdown_css = expand('~/.config/vim/markdown.css')
nmap <leader>p <Plug>MarkdownPreview
nmap <leader>P <Plug>MarkdownPreviewStop
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {},
    \ 'flowchart_diagrams': {},
    \ 'content_editable': v:false,
    \ 'disable_filename': 1
    \ }

"markdown-toc
let g:vmt_fence_text = 'TOC'
let g:vmt_fence_closing_text = '/TOC'
let g:vmt_list_item_char = '-'
nmap <leader>t :GenTocGFM<CR>

