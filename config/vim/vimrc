call plug#begin('$XDG_CONFIG_HOME/vim/plugged')
" Browsing
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } " fuzzy find
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-vinegar' " improved Netrw

" Visual
Plug 'vim-airline/vim-airline' " status line
Plug 'ryanoasis/vim-devicons' " icons support
Plug 'NLKNguyen/papercolor-theme' " improved highlighting
Plug 'Yggdroot/indentLine' " identation cues
Plug 'rrethy/vim-hexokinase', { 'do': 'make hexokinase' } " colors cues

" Code
Plug 'dense-analysis/ale' " syntax highlighting and fixing
Plug 'metakirby5/codi.vim' " repl
Plug 'tpope/vim-surround' " quoting
Plug 'tpope/vim-commentary' " commenting
Plug 'godlygeek/tabular' " alignment
Plug 'cespare/vim-toml' " syntax for TOML

" Git
Plug 'tpope/vim-fugitive' " conflict resolution flow
Plug 'tpope/vim-rhubarb' " github integration
Plug 'airblade/vim-gitgutter' " git highlight, un/stage changes
Plug 'junegunn/gv.vim' " commit browser
Plug 'rhysd/git-messenger.vim' " show commit messages

" Markdown
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' } " language pack
Plug 'mzlogin/vim-markdown-toc', { 'for': 'markdown' } " table of contents

" Snippets
Plug 'SirVer/ultisnips' " snippets framework
Plug 'honza/vim-snippets' " snippets

" Deprecation candidates
Plug 'tpope/vim-abolish' " variations for search and replace
call plug#end()

"set vim info path
set viminfo+='1000,n$XDG_CACHE_HOME/vim/viminfo
if has('nvim') | let &viminfo .= '.nvim' | endif

filetype plugin indent on " per filetype config

" env 
let g:python_host_prog = '/usr/bin/python'
let g:python3_host_prog = '/usr/bin/python3'

syntax on
set encoding=utf-8

if !has('nvim') | set viminfofile=$XDG_STATE_HOME/vim/viminfo | endif

" line number
set number relativenumber
nnoremap <leader>n :setlocal number! relativenumber!<CR>

" n spaces tab
set tabstop=2
set shiftwidth=2
set expandtab

" autocompletion
set wildmode=longest,list,full

" fix splits
set splitbelow splitright
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" enable mouse events
set mouse=a

" alternative <esc> in insert mode
inoremap jk <esc>

" disable arrow keys
"inoremap <Up> <nop>
"inoremap <Down> <nop>
"inoremap <Left> <nop>
"inoremap <Right> <nop>

" enclosing helpers
"" word on cursor
nnoremap <leader>" ciw"<C-r>""<ESC>
nnoremap <leader>' ciw'<C-r>"'<ESC>
nnoremap <leader>( ciw(<C-r>")<ESC>
nnoremap <leader>[ ciw[<C-r>"]<ESC>
nnoremap <leader>{ ciw{<C-r>"}<ESC>

"" cursor to EOL
nnoremap <leader>e" c$"<C-r>""<ESC>
nnoremap <leader>e' c$'<C-r>"'<ESC>
nnoremap <leader>e( c$(<C-r>")<ESC>
nnoremap <leader>e[ c$[<C-r>"]<ESC>
nnoremap <leader>e{ c${<C-r>"}<ESC>

" tabularize
"" usage :Tab<delimiter_char>
cnoreabbrev Tab Tabularize/

" folds
nnoremap <space> za

" ignores capital-typos when you want to write/quit
:command WQ wq
:command Wq wq
:command W w
:command Q q

" clipboard
vnoremap <C-c> "*y :let @+=@*<CR>
vnoremap <C-x> "*x :let @+=@*<CR>
noremap <C-v> "+P

" spell-check
nnoremap <leader>en :setlocal spell! spelllang=en_us<CR>
nnoremap <leader>pt :setlocal spell! spelllang=pt_br<CR>

" show hidden chars
nnoremap <leader>i :setlocal list!<CR>
"" show space as .
set lcs+=space:Â·

" allow the . to execute once for each line of a visual selection
vnoremap . :normal .<CR>

" vim auto-update
set updatetime=250

" disable automatic commenting on new line
"autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" soft linewrap
set wrap linebreak

" Colors
" https://github.com/RRethy/vim-hexokinase/issues/10 
set termguicolors
" set background=dark
set background=light

" set Vim-specific sequences for RGB colors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

" papercolor
" https://github.com/NLKNguyen/papercolor-theme/blob/master/colors/PaperColor.vim#L126
" let g:PaperColor_Theme_Options = {
"   \   'theme': {
"   \     'default': {
"   \       'transparent_background': 1,
"   \       'override' : {
"   \         'color00' : ['#1d2529', ''],
"   \         'color01' : ['#12171a', ''],
"   \         'color02' : ['#ff66c2', ''],
"   \         'color03' : ['#d9b600', ''],
"   \         'color04' : ['#6bac00', ''],
"   \         'color05' : ['#999999', ''],
"   \         'color06' : ['#d40059', ''],
"   \         'color07' : ['#dddddd', ''],
"   \         'color08' : ['#00a8e0', ''],
"   \         'color09' : ['#ff5c00', ''],
"   \         'color10' : ['#379000', ''],
"   \         'color11' : ['#00af9e', ''],
"   \         'color12' : ['#b37eff', ''],
"   \         'color13' : ['#009385', ''],
"   \         'color14' : ['#0087e9', ''],
"   \         'color15' : ['#cf2424', ''],
"   \         'cursorlinenr_bg' : ['#3a3a3a', ''],
"   \       }
"   \     }
"   \   }
"   \ }

  " \         'cursor_fg' : ['#242e33', ''],
  " \         'cursor_bg' : ['#eceff1', ''],
  " \         'cursorline' : ['#eceff1', ''],
  " \         'cursorcolumn' : ['#eceff1', ''],
  " \         'todo_fg' : ['#eeeeee', ''],
  " \         'todo_bg' : ['#b80600', ''],
  " \         'guibg' : ['#242e33', ''],
  " \         'guifg' : ['#eceff1', ''],
  " \         'visual_bg' : ['#242e33', ''],
  " \         'visual_fg' : ['#eceff1', '']

colorscheme PaperColor

" fzf
nnoremap <leader>F :Files<CR>
nnoremap <leader>fw :Windows<CR>

" airline
let g:airline_theme='supernova'
"" integrations
let g:airline_powerline_fonts = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1

" ALE
"" set HL colors
highlight ALEWarning ctermbg=yellow
highlight ALEError ctermbg=red
"" binds for moving
nmap <silent> <C-b> <Plug>(ale_previous_wrap)
nmap <silent> <C-e> <Plug>(ale_next_wrap)
"" toggle
nnoremap <leader>l :ALEToggleBuffer<CR>
"" when to lint
"let g:ale_lint_on_text_changed = 'never'
"let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 1 " when opening a file

"" set linters
let g:ale_linters = {
\   'html': ['prettier'],
\   'javascript': ['prettier', 'eslint'] 
\}

"" disable linters
let g:ale_pattern_options = {
\   '\.min.js$': {'ale_enabled': 0},
\   '\.md$': {'ale_enabled': 0}
\}

"" set fixers (fix w/ :ALEFixer)
let b:ale_fixers = ['prettier', 'eslint']

" codi
nnoremap <leader>c :Codi<CR>
nnoremap <leader>C :Codi!<CR>

" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
nnoremap <leader>fs :Snippets<CR>

" GIT
"" Diffs
nnoremap dg :diffget<CR>
nnoremap dh :diffget LO<CR>
nnoremap dl :diffget RE<CR>
nnoremap <silent> ]C /\v^[<>=\|]{4,7}($\|\s\|\r)<CR>

"" Fugitive
nnoremap <leader>fc :BCommits<CR>
nnoremap <leader>fC :Commits<CR>

"" Git Gutter
highlight GitGutterAdd    guifg=#009900 ctermfg=2
highlight GitGutterChange guifg=#bbbb00 ctermfg=3
highlight GitGutterDelete guifg=#ff2222 ctermfg=1

nmap <leader>hs <Plug>(GitGutterStageHunk)
nmap <leader>hu <Plug>(GitGutterUndoHunk)
nmap <leader>hp <Plug>(GitGutterPreviewHunk)
nnoremap <leader>hl :GitGutterLineHighlineToggle<CR>

"" Git Messenger
nmap <Leader>hm <Plug>(git-messenger)
"let g:git_messenger_include_diff="current"
let g:git_messenger_always_into_popup=v:true

" hexokinase
let g:Hexokinase_highlighters = ['virtual']
"let g:Hexokinase_ftEnabled = ['css', 'html', 'javascript']

" WEB
"autocmd FileType html css

" FUNCTIONS
" convert rows of numbers or text (as if pasted from excel column) to a tuple
fun! ToTuple() range
    silent execute a:firstline . "," . a:lastline . "s/^/'/"
    silent execute a:firstline . "," . a:lastline . "s/$/',/"
    silent execute a:firstline . "," . a:lastline . "join"
    silent execute "normal I("
    silent execute "normal $xa)"
endfunction

" convert a simple code span to a nice shell code fence
fun! ToShell()
    silent execute "s/^`/```sh\r/"
    silent execute "s/`$/\r```/"
endfunction

" remove trailing whitespaces
func! CleanUp(...)
  if a:0  " opfunc
    let [first, last] = [line("'["), line("']")]
  else
    let [first, last] = [line("'<"), line("'>")]
  endif
  for lnum in range(first, last)
    let line = getline(lnum)

    " clean up the text, e.g.:
    let line = substitute(line, '\s\+$', '', '')

    call setline(lnum, line)
  endfor
endfunction
nmap <silent> <Leader>x :set opfunc=CleanUp<CR>g@

" Autocommand
" prevent including autocommands more than once
if !exists("autocommands_loaded")
  let autocommands_loaded = 1

  au BufNewFile,BufRead *.tsv   set filetype=tsv    " tab-separated values
  au BufNewFile,BufRead *.json  set conceallevel=0

  augroup wikimedia
    au BufNewFile,BufRead *wikimedia/*         set noexpandtab tabstop=4 shiftwidth=4
    " au BufNewFile,BufRead *wikimedia/*.html  set ts=4 sw=4
    " au BufNewFile,BufRead *wikimedia/*.css   set ts=4 sw=4
    " au BufNewFile,BufRead *wikimedia/*.scss  set ts=4 sw=4
    " au BufNewFile,BufRead *wikimedia/*.js    set ts=4 sw=4
    " au BufNewFile,BufRead *wikimedia/*.php   set ts=4 sw=4
  augroup END
endif

